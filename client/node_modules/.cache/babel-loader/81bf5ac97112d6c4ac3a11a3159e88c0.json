{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; //import service \n\nimport authService from './authService'; // Get user from localStorage\n\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; //* create async thunk to accept actions and a function which returns promise and action type based on that promise\n// Register user\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Login user\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // update student\n\nexport const updateStudent = createAsyncThunk('auth/update', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await authService.updateStudent(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n}); //creating slice to combined reducer and action\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(updateStudent.pending, state => {\n      state.isLoading = true;\n    }).addCase(updateStudent.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(updateStudent.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","updateStudent","id","token","getState","auth","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["N:/Projects/Surge/Surge-Global-Assignment/client/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n//import service \r\nimport authService from './authService'\r\n\r\n// Get user from localStorage\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n}\r\n\r\n//* create async thunk to accept actions and a function which returns promise and action type based on that promise\r\n\r\n// Register user\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await authService.register(user)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user)\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString()\r\n    return thunkAPI.rejectWithValue(message)\r\n  }\r\n})\r\n\r\n// update student\r\nexport const updateStudent = createAsyncThunk(\r\n  'auth/update',\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await authService.updateStudent(id, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  await authService.logout()\r\n})\r\n\r\n//creating slice to combined reducer and action\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false\r\n      state.isSuccess = false\r\n      state.isError = false\r\n      state.message = ''\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.user = action.payload\r\n      })\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n        state.user = null\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.user = action.payload\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n        state.user = null\r\n      })\r\n      .addCase(updateStudent.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(updateStudent.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.user = action.payload\r\n      })\r\n      .addCase(updateStudent.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n        state.user = null\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null\r\n      })\r\n  },\r\n})\r\n\r\nexport const { reset } = authSlice.actions\r\nexport default authSlice.reducer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}